runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("showNotification")
runApp()
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
shiny::runApp()
runApp()
runApp()
# Continuity definition
cutoffcont <- function(n){
# Cutoff for continuity f(n)=a*log10(n)+b, f(10)=0.75, f(>=100)=0.25
b=125
a=-50
if (n<=100) {
cut <- min(1,(a*log10(n)+b)/100)
} else {
cut <- 25/n
}
return(cut)
}
cutoffcont(1)
cutoffcont(2)
cutoffcont(3)
cutoffcont(4)
cutoffcont(5)
cutoffcont(6)
cutoffcont(7)
cutoffcont(8)
cutoffcont(9)
cutoffcont(10)
cutoffcont(11)
cutoffcont(12)
cutoffcont(100)
cutoffcont(200)
cutoffcont(2000)
cutoffcont(20000)
cutoffcont(200000)
help(unique)
c(1,1.2,1.2333,1.3456,1.5667,1.789,1.9,2,2,2,2,2)
vec<-c(1,1.2,1.2333,1.3456,1.5667,1.789,1.9,2,2,2,2,2)
unique(vec)
x<-c(1,2,3,4,5,6,7,8,9,10)
y<-c(0.2,0.4,,,0.9,1,1,1,1,1)
y<-c(0.2,0.4,NA,NA,0.9,1,1,1,1,1)
# Compute outliers by knn proximity based method, liberal
data<-data.frame(x,y)
data<-data[complete.cases(data),]
outliers_scores <- LOOP(data, k=5, lambda=3)
outliers <- outliers_scores[which(outliers_scores>0.90)]
if (length(outliers>0)){
dataclean <- data[-outliers, ]
} else dataclean<-data
xclean<-dataclean[,1]
yclean<-dataclean[,2]
x<-c(1,2,3,4,5,6,7,8,9,10)
y<-c(0.2,0.4,NA,NA,0.9,1,1,1,1,1)
xclean<-c(1,2,3,4,5,6,7,8,9,10)
yclean<-c(0.2,0.4,NA,NA,0.9,1,1,1,1,1)
# Boxcox without outliers
# Just positive allowed
if (!all(yclean>0, na.rm=TRUE)) {
y1 <- yclean+abs(min(yclean,na.rm=TRUE))+0.01*(max(yclean,na.rm=TRUE)-min(yclean,na.rm=TRUE))
} else {y1 <- yclean}
trafo <- boxcox(y1 ~ xclean, lambda = seq(-6,6,0.05), plotit = FALSE)
vec<-trafo$x[trafo$y > max(trafo$y) - 1/2 * qchisq(.999,1)]
vec2<-c(0.75,0.80,0.85,0.90,0.95,1.00,1.05,1.10,1.15,1.20,1.25) %in% round(vec,2)
boxcoxtest1 <- sum(vec2)
boxcox(y1 ~ xclean, lambda = seq(-6,6,0.05), plotit = FALSE)
help(boxcox)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(boot)
x<-c(1,2,3,NA)
na.omit(x)
y<-na.omit(x)
y
y[1]
length(y)
y
length(x)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(colnames)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
(a*log10(n)+b)/100
a=-50
b=125
n=100
(a*log10(n)+b)/100
runApp()
runApp()
runApp()
runApp()
help(shinyNotification)
help(showNotification)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydisconnect")
install.packages("shinydisconnect")
Sys.which("make")
Sys.which("make")
shiny::runApp()
install.packages("digest")
shiny::runApp()
install.packages("rlang")
shiny::runApp()
install.packages("httpuv")
install.packages(c("arm", "AsioHeaders", "av", "aweek", "aws.s3", "aws.signature", "backports", "bdsmatrix", "bench", "BH", "bit", "bit64", "blob", "boot", "broom", "Cairo", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "classInt", "cli", "cmprsk", "covr", "crosstalk", "dbplyr", "DescTools", "devtools", "diffobj", "DT", "dtplyr", "ellipsis", "emplik", "EpiEstim", "etm", "expm", "extremevalues", "fansi", "farver", "fitdistrplus", "foghorn", "forcats", "foreach", "forecast", "foreign", "fracdiff", "fs", "future", "gargle", "gdtools", "gettz", "ggforce", "ggplot2", "gh", "git2r", "gower", "gplots", "haven", "hexbin", "Hmisc", "hms", "htmltab", "htmlTable", "httr", "janitor", "knitr", "Lahman", "later", "lava", "lavaan", "lintr", "lme4", "lubridate", "magick", "manipulateWidget", "mapproj", "maptools", "MASS", "matrixStats", "maxLik", "MCMCpack", "memisc", "mice", "mime", "mnormt", "ModelMetrics", "multcomp", "mvtnorm", "nloptr", "openssl", "openxlsx", "pbkrtest", "pdftools", "pillar", "pingr", "pkgbuild", "pkgdown", "pkgload", "PKI", "plm", "plyr", "polspline", "prettyunits", "pROC", "processx", "promises", "proxy", "ps", "psych", "psychTools", "purrr", "pwr", "quantmod", "quantreg", "R.methodsS3", "R.rsp", "raster", "Rcpp", "RcppArmadillo", "RcppCCTZ", "RcppParallel", "Rcsdp", "RCurl", "Rdpack", "recipes", "rematch2", "remotes", "repr", "reshape2", "rex", "rgdal", "rgeos", "rgl", "rJava", "RJDBC", "RJSONIO", "rms", "RMySQL", "ROCR", "roxygen2", "RSQLite", "rstudioapi", "rsvg", "rversions", "sass", "scales", "scico", "sem", "sf", "shinyjs", "shinytest", "showtext", "showtextdb", "skimr", "sp", "splines2", "SQUAREM", "stringdist", "stringi", "styler", "summarytools", "svglite", "svUnit", "sysfonts", "systemfonts", "tables", "testthat", "tibble", "tidyr", "tikzDevice", "tinytest", "tinytex", "tufte", "unitizer", "units", "usethis", "uuid", "vcd", "vctrs", "vdiffr", "websocket", "webutils", "withr", "xfun", "XML", "xml2", "xts", "yaml", "zoo"))
shiny::runApp()
install.packages("magrittr")
shiny::runApp()
install.packages("xtable")
shiny::runApp()
install.packages("fastmap")
shiny::runApp()
install.packages("crayon")
runApp()
install.packages("rmarkdown")
runApp()
install.packages("evaluate")
runApp()
install.packages("data.table")
runApp()
install.packages("readr")
runApp()
install.packages("pkgconfig")
runApp()
install.packages("lifecycle")
runApp()
install.packages("glue")
runApp()
runApp()
install.packages('tinytex')
tinytex::install_tinytex()
tinytex:::is_tinytex()
shiny::runApp()
shiny::runApp()
install.packages("rio")
install.packages("nortest")
install.packages("minerva")
install.packages("lmtest")
install.packages("energy")
install.packages("DDoutlier")
runApp()
install.packages("car")
runApp()
help("install.packages")
install.packages("curl", dependencies = TRUE)
install.packages("Hmisc", dependencies = TRUE)
runApp()
install.packages("zip")
shiny::runApp()
install.packages("testforDEP")
runApp()
runApp()
install.packages("readxl")
runApp()
install.packages("cellranger")
runApp()
install.packages("abind")
runApp()
install.packages("boot")
install.packages("MASS")
install.packages("DescTools")
install.packages("knitr")
shiny::runApp()
runApp()
runApp()
install.packages("dbscan")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
rateunique_df<-FALSE
sum( rateunique_df==TRUE)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(fread)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(rm)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(bgtest)
help(lm)
help(shapiro.test)
help(na.rm)
!is.na(x)
x<-c(NA,1,2,3)
!is.na(x)
all(!is.na(x))
all(is.na(x))
complete.cases(x)
x[complete.cases(x)]
runApp()
help(cor.test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(bgtest)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp()
runApp()
help(which)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
tryCatch({
dede ist blöd
}, error=function(e){cat("")})
tryCatch({
cat("dede ist blöd")
}, error=function(e){cat("")})
tryCatch({
dede ist blöd
}, error=function(e){message(e)})
tryCatch({
dede ist blöd
}, error=function(e){cat("")})
tryCatch({
dede ist blöd
}, error=function(e){})
tryCatch({
dede ist blöd
}, error=function(e){})
tryCatch({
dede ist blöd
}, error=function(e){message(e)})
runApp()
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(setdiff)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
help("outlierTest")
runApp()
shiny::runApp()
runApp()
install.packages("shinydisconnect")
runApp()
shiny::runApp()
runApp()
help(req)
runApp()
exists("x")
runApp()
help(req)
help("fileInput")
shiny::runApp()
runApp()
help("actionButton")
runApp()
help(render)
runApp()
shiny::runApp()
runApp()
help("testforDEP"
)
help(dcor.test)
runApp()
getAnywhere(disconnectMessage)
runApp()
runApp('G:/REYAR/statsomat/Development/Correlations')
runApp()
# p-value format:
pformat<-function(p){
if (p<0.001) return("<0.001") else return (round(p,3))
}
runApp()
help(runApp)
runApp()
help(Sys.sleep)
runApp()
shiny::runApp()
help(tools::file_ext)
help(file_ext)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
(2>0)
runApp()
exist(c("a","b"))
exists(c("a","b"))
exists(c("a","bkjkh"))
exists("a")
exists("a.,m")
exists("alkjlökjm")
exists("b-")
exists("b")
runApp()
cor(c(1,2,3),c(182,1,1))
runApp()
shiny::runApp()
runApp()
shiny::runApp()
round(runif(1,100,1000))
help("testforDEP")
help(dist)
help("dcor.test")
runApp()
help("testforDEP")
runApp()
help(cor.test)
help(cor)
help(cor.test)
runApp()
shiny::runApp()
help("testforDEP")
runApp()
help(boot)
runApp()
shiny::runApp()
help("scatterplotMatrix")
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp('G:/REYAR/statsomat/Development/Correlations')
runApp()
round(runif(1,100,1000))
seed = round(runif(1,100,1000))
class(seed)
seed = as.integer(round(runif(1,100,1000)))
class(seed)
runApp()
shiny::runApp()
runApp()
rsconnect::showLogs(appPath = "G:/REYAR/statsomat/Test shinyapps.io/Correlations" , streaming = TRUE)
runApp()
help(kable)
runApp()
shiny::runApp()
runApp()
help("scatterplotMatrix")
runApp()
help(sample)
shiny::runApp()
help("fileInput")
runApp()
help(file.info)
runApp()
help(fileinput)
help(fileInput)
runApp()
help(format)
runApp()
invalidateLater(as.integer(5000), session)
runApp()
