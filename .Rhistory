library(gridExtra)
library(R0)
library(EpiEstim)
library(scales)
# Define the path to your data (please remark the forward slash)
filepath <- "G:/REYAR/Operations/Covid/RKI_COVID19.csv"
# Upload and prepare the data
rki <- fread(filepath, header ="auto", sep ="auto", dec =",", encoding ="unknown", data.table = TRUE, na.strings = "")
rki<-rki[Landkreis %in% c("SK KÃ¶ln", "SK Leverkusen") & NeuerFall %in% c(0,1)] #SK KÃ¶ln
#rki<-rki[Landkreis %in% c("SK KÃ¶ln") & NeuerFall %in% c(0,1)]
rki2<-rki[,.(diffs=sum(AnzahlFall)),by=Refdatum]
rki3<-rki2[,.(Time=substr(Refdatum,1,10),diffs)]
df<-data.frame(rki3)
df$Time<-as.Date(df$Time,"%Y/%m/%d")
df<-df[order(df$Time),]
df$dfno<-seq(1:nrow(df))
df$Incidence<-cumsum(df$diffs)
sum(df$diffs)
# R
data<-df[11:nrow(df),2]
estR2<-estimate_R(data, method="parametric_si", config = make_config(list(mean_si = 4, std_si = 1.9, si_parametric_distr = "W"))) #https://www.medrxiv.org/content/10.1101/2020.03.08.20032946v1.full.pdf
# Plot
withdates<-estR2$R
data2<-df[11:nrow(df),c(1,2),drop=FALSE]
data2$t_end<-seq(1:nrow(data2))
data2<-data2[8:nrow(data2),]
data3<-merge(data2,withdates,by="t_end")
g6 <- ggplot(data3, aes(data3$Time, data3$`Mean(R)`)) +
geom_ribbon(aes(ymin = data3$`Quantile.0.025(R)`, ymax = data3$`Quantile.0.975(R)`, fill = "95%CrI")) +
geom_line() +
geom_hline(yintercept = 1, linetype = "dotted") +
labs(title = "Reproduktionszahl für Köln & Leverkusen",
x = "Datum", y = "R für Köln & Leverkusen", caption="Datenquelle: Fallzahlen des RKI, Kontakt für Details: https://reyar.de") +
ylim(c(0, 4) ) +
theme(legend.position="none") +
scale_x_date(labels = date_format("%d-%m"),limits = c(as.Date("2020-03-02"), NA))
# Plot
g4 <- ggplot(data = df, aes(x = df$Time, y = df$diffs)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Neue bestätigte Fälle pro Tag, nach Erkrankungsdatum",
x = "Datum", y = "Anzahl", caption="Datenquelle: Fallzahlen des RKI, Kontakt für Details: https://reyar.de", subtitle="Köln & Leverkusen") +
scale_x_date(limits = c(as.Date("2020-03-02"), NA))
# Plot
last<-df[c(nrow(df)),c(1,4),drop=FALSE]
g5 <- ggplot(data =df, aes(x = df$Time, y = df$Incidence)) +
geom_step(color = "blue") +
scale_y_continuous(trans='log10') +
geom_point(data = last, aes(x = Time, y = Incidence), col = "red", shape = 21, fill = "white", size = 2, stroke = 1.7) +
geom_text(data = last, aes(x = Time, y = Incidence, label = sprintf("%0.0f", Incidence)), size = 4, vjust = 2.5) +
labs(title = "Entwicklung ab dem ersten Fall, nach Erkrankungsdatum",
x = "Datum", y = "Anzahl", caption="Datenquelle:  Fallzahlen des RKI, Kontakt für Details: https://reyar.de", subtitle = "Köln & Leverkusen")
grid.arrange(g4,g5,g6,ncol=1,nrow=3, top="Stand 28. April 2020")
df$week<-week(df$Time)
df2<-data.table(df)
df2<-df2[,.(perweek=sum(diffs)),by=week]
View(withdates)
df$week<-week(df$Time)
df2<-data.table(df)
df2<-df2[,.(perweek=sum(diffs)),by=week]
View(df2)
library(data.table)
library(ggplot2)
library(gridExtra)
library(R0)
library(EpiEstim)
library(scales)
# Define the path to your data (please remark the forward slash)
filepath <- "G:/REYAR/Operations/Covid/RKI_COVID19.csv"
# Upload the data
rki <- fread(filepath, header ="auto", sep ="auto", dec =",", encoding ="unknown", data.table = TRUE, na.strings = "")
rki<-rki[Landkreis=="SK Leverkusen" & NeuerFall %in% c(0,1)]
rki2<-rki[,.(diffs=sum(AnzahlFall)),by=Refdatum]
rki3<-rki2[,.(Time=substr(Refdatum,1,10),diffs)]
rkialter<-rki[,.(diffs=sum(AnzahlFall)),by=Altersgruppe]
df<-data.frame(rki3)
df$Time<-as.Date(df$Time,"%Y/%m/%d")
df<-df[order(df$Time),]
df$dfno<-seq(1:nrow(df))
sum(df$diffs)
data<-df[5:nrow(df),2]
estR2<-estimate_R(data, method="parametric_si", config = make_config(list(mean_si = 5, std_si = 1.9, si_parametric_distr = "W"))) #https://www.medrxiv.org/content/10.1101/2020.03.08.20032946v1.full.pdf
# g3 <- plot(estR2, "R", options_R=list(ylim=c(0, 4), xlab="Tag nach 7.03.2020", ylab="R für Leverkusen"), legend=FALSE)
# Plot
withdates<-estR2$R
data2<-df[5:nrow(df),c(1,2),drop=FALSE]
data2$t_end<-seq(1:nrow(data2))
data2<-data2[8:nrow(data2),]
data3<-merge(data2,withdates,by="t_end")
g3 <- ggplot(data3, aes(data3$Time, data3$`Mean(R)`)) +
geom_ribbon(aes(ymin = data3$`Quantile.0.025(R)`, ymax = data3$`Quantile.0.975(R)`, fill = "95%CrI")) +
geom_line() +
geom_hline(yintercept = 1, linetype = "dotted") +
labs(title = "Reproduktionszahl für Leverkusen",
x = "Datum", y = "R für Leverkusen", caption="Datenquelle: Fallzahlen des RKI, Kontakt für Details: https://reyar.de") +
ylim(c(0, 4) ) +
theme(legend.position="none") +
scale_x_date(labels = date_format("%d-%m"),limits = c(as.Date("2020-03-15"), NA))
View(withdates)
library(data.table)
library(ggplot2)
library(grid)
library(gridExtra)
library(R0)
# Define the path to your data (please remark the forward slash)
filepath <- "G:/REYAR/Operations/Covid/Leverkusen.csv"
# Upload the data
df <- fread(filepath, header ="auto", sep ="auto", dec =".", encoding ="unknown", data.table = FALSE, na.strings = "")
df$loginc<-log(df$Incidence)
df$Time<-as.Date(df$Time,"%d/%m/%Y")
df$diffs<-c(0,diff(df$Incidence))
df$dfno<-seq(1:nrow(df))
# Plots
last<-df[c(nrow(df)),c(1,2),drop=FALSE]
g1<-ggplot(data =df, aes(x = df$Time, y = df$diffs)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Neue bestätigte Fälle pro Tag, nach Meldedatum",
x = "Datum", y = "Anzahl", caption="Datenquelle: leverkusen.de", subtitle = "Leverkusen")
g2<-ggplot(data =df, aes(x = df$Time, y = df$Incidence)) +
geom_step(color = "blue") +
scale_y_continuous(trans='log10') +
geom_point(data = last, aes(x = Time, y = Incidence), col = "red", shape = 21, fill = "white", size = 2, stroke = 1.7) +
geom_text(data = last, aes(x = Time, y = Incidence, label = sprintf("%0.0f", Incidence)), size = 4, vjust = 2.5) +
labs(title = "Entwicklung ab dem ersten Fall, nach Meldedatum",
x = "Datum", y = "Anzahl", caption="Datenquelle: leverkusen.de", subtitle = "Leverkusen")
grid.arrange(g1,g2,g3,ncol=1,nrow=3, top="Stand 28. April 2020")
df$week<-week(df$Time)
df2<-data.table(df)
df2<-df2[,.(perweek=sum(diffs)),by=week]
df$week<-week(df$Time)
df2<-data.table(df)
df2<-df2[,.(perweek=sum(diffs)),by=week]
View(df2)
View(df)
library(data.table)
library(ggplot2)
library(gridExtra)
library(R0)
library(EpiEstim)
library(scales)
# Define the path to your data (please remark the forward slash)
filepath <- "G:/REYAR/Operations/Covid/RKI_COVID19.csv"
# Upload and prepare the data
rki <- fread(filepath, header ="auto", sep ="auto", dec =",", encoding ="unknown", data.table = TRUE, na.strings = "")
#rki<-rki[Landkreis=="SK DÃ¼sseldorf" & NeuerFall %in% c(0,1)]
rki<-rki[Bundesland=="Nordrhein-Westfalen" & NeuerFall %in% c(0,1)]
#rki<-rki[NeuerFall %in% c(0,1)]
rki2<-rki[,.(diffs=sum(AnzahlFall)),by=Refdatum]
rki3<-rki2[,.(Time=substr(Refdatum,1,10),diffs)]
df<-data.frame(rki3)
df$Time<-as.Date(df$Time,"%Y/%m/%d")
df$difdates<-difftime(df$TimeMeldung,df$Time,units="days")
df<-df[order(df$Time),]
df$dfno<-seq(1:nrow(df))
df$Incidence<-cumsum(df$diffs)
sum(df$diffs)
# R
data<-df[11:nrow(df),2]
estR2<-estimate_R(data, method="parametric_si", config = make_config(list(mean_si = 4, std_si = 1.9, si_parametric_distr = "W"))) #https://www.medrxiv.org/content/10.1101/2020.03.08.20032946v1.full.pdf
# g4 <- plot(estR2, "R", options_R=list(ylim=c(0, 4), xlim=c(20,65), xlab="Tag nach 13.02.2020", ylab="R für NRW"), legend=FALSE)
# Plot
withdates<-estR2$R
data2<-df[11:nrow(df),c(1,2),drop=FALSE]
data2$t_end<-seq(1:nrow(data2))
data2<-data2[8:nrow(data2),]
data3<-merge(data2,withdates,by="t_end")
g6 <- ggplot(data3, aes(data3$Time, data3$`Mean(R)`)) +
geom_ribbon(aes(ymin = data3$`Quantile.0.025(R)`, ymax = data3$`Quantile.0.975(R)`, fill = "95%CrI")) +
geom_line() +
geom_hline(yintercept = 1, linetype = "dotted") +
labs(title = "Reproduktionszahl für NRW",
x = "Datum", y = "R für NRW", caption="Datenquelle: Fallzahlen des RKI, Kontakt für Details: https://reyar.de") +
ylim(c(0, 4) ) +
theme(legend.position="none") +
scale_x_date(labels = date_format("%d-%m"),limits = c(as.Date("2020-03-02"), NA))
# Plot
g4 <- ggplot(data = df, aes(x = df$Time, y = df$diffs)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Neue bestätigte Fälle pro Tag, nach Erkrankungsdatum",
x = "Datum", y = "Anzahl", caption="Datenquelle: Fallzahlen des RKI, Kontakt für Details: https://reyar.de", subtitle="NRW") +
scale_x_date(limits = c(as.Date("2020-03-02"), NA))
# Plot
last<-df[c(nrow(df)),c(1,4),drop=FALSE]
g5 <- ggplot(data =df, aes(x = df$Time, y = df$Incidence)) +
geom_step(color = "blue") +
scale_y_continuous(trans='log10') +
geom_point(data = last, aes(x = Time, y = Incidence), col = "red", shape = 21, fill = "white", size = 2, stroke = 1.7) +
geom_text(data = last, aes(x = Time, y = Incidence, label = sprintf("%0.0f", Incidence)), size = 4, vjust = 2.5) +
labs(title = "Entwicklung ab dem ersten Fall, nach Erkrankungsdatum",
x = "Datum", y = "Anzahl", caption="Datenquelle:  Fallzahlen des RKI, Kontakt für Details: https://reyar.de", subtitle = "NRW")
grid.arrange(g4,g5,g6,ncol=1,nrow=3, top="Stand 21. April 2020")
df$week<-week(df$Time)
df2<-data.table(df)
df2<-df2[,.(perweek=sum(diffs)),by=week]
View(withdates)
library(data.table)
library(ggplot2)
library(gridExtra)
library(R0)
library(EpiEstim)
library(scales)
# Define the path to your data (please remark the forward slash)
filepath <- "G:/REYAR/Operations/Covid/RKI_COVID19.csv"
# Upload and prepare the data
rki <- fread(filepath, header ="auto", sep ="auto", dec =",", encoding ="unknown", data.table = TRUE, na.strings = "")
rki<-rki[Landkreis %in% c("SK KÃ¶ln", "SK Leverkusen") & NeuerFall %in% c(0,1)] #SK KÃ¶ln
#rki<-rki[Landkreis %in% c("SK KÃ¶ln") & NeuerFall %in% c(0,1)]
rki2<-rki[,.(diffs=sum(AnzahlFall)),by=Refdatum]
rki3<-rki2[,.(Time=substr(Refdatum,1,10),diffs)]
df<-data.frame(rki3)
df$Time<-as.Date(df$Time,"%Y/%m/%d")
df<-df[order(df$Time),]
df$dfno<-seq(1:nrow(df))
df$Incidence<-cumsum(df$diffs)
sum(df$diffs)
# R
data<-df[11:nrow(df),2]
estR2<-estimate_R(data, method="parametric_si", config = make_config(list(mean_si = 4, std_si = 1.9, si_parametric_distr = "W"))) #https://www.medrxiv.org/content/10.1101/2020.03.08.20032946v1.full.pdf
# Plot
withdates<-estR2$R
data2<-df[11:nrow(df),c(1,2),drop=FALSE]
data2$t_end<-seq(1:nrow(data2))
data2<-data2[8:nrow(data2),]
data3<-merge(data2,withdates,by="t_end")
g6 <- ggplot(data3, aes(data3$Time, data3$`Mean(R)`)) +
geom_ribbon(aes(ymin = data3$`Quantile.0.025(R)`, ymax = data3$`Quantile.0.975(R)`, fill = "95%CrI")) +
geom_line() +
geom_hline(yintercept = 1, linetype = "dotted") +
labs(title = "Reproduktionszahl für Köln & Leverkusen",
x = "Datum", y = "R für Köln & Leverkusen", caption="Datenquelle: Fallzahlen des RKI, Kontakt für Details: https://reyar.de") +
ylim(c(0, 4) ) +
theme(legend.position="none") +
scale_x_date(labels = date_format("%d-%m"),limits = c(as.Date("2020-03-02"), NA))
# Plot
g4 <- ggplot(data = df, aes(x = df$Time, y = df$diffs)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Neue bestätigte Fälle pro Tag, nach Erkrankungsdatum",
x = "Datum", y = "Anzahl", caption="Datenquelle: Fallzahlen des RKI, Kontakt für Details: https://reyar.de", subtitle="Köln & Leverkusen") +
scale_x_date(limits = c(as.Date("2020-03-02"), NA))
# Plot
last<-df[c(nrow(df)),c(1,4),drop=FALSE]
g5 <- ggplot(data =df, aes(x = df$Time, y = df$Incidence)) +
geom_step(color = "blue") +
scale_y_continuous(trans='log10') +
geom_point(data = last, aes(x = Time, y = Incidence), col = "red", shape = 21, fill = "white", size = 2, stroke = 1.7) +
geom_text(data = last, aes(x = Time, y = Incidence, label = sprintf("%0.0f", Incidence)), size = 4, vjust = 2.5) +
labs(title = "Entwicklung ab dem ersten Fall, nach Erkrankungsdatum",
x = "Datum", y = "Anzahl", caption="Datenquelle:  Fallzahlen des RKI, Kontakt für Details: https://reyar.de", subtitle = "Köln & Leverkusen")
grid.arrange(g4,g5,g6,ncol=1,nrow=3, top="Stand 28. April 2020")
df$week<-week(df$Time)
df2<-data.table(df)
df2<-df2[,.(perweek=sum(diffs)),by=week]
View(withdates)
df$week<-week(df$Time)
df2<-data.table(df)
df2<-df2[,.(perweek=sum(diffs)),by=week]
View(df2)
View(rkialter)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df[ ,col_names] <- sapply(df[, col_names], function(col) iconv(col, "ASCII",
"UTF-8"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(cor.test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("textOutput")
runApp()
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
options(na.action=na.omit) # Option for missing values
# Import required libraries
library(data.table)
library(boot)
library(car)
library(DescTools)
library(testforDEP)
library(energy)
# Define the path to your data (please remark the forward slash)
filepath <-"G:/REYAR/statsomat/Local/data/Bodymass.csv"
# Upload the data
df <- fread(filepath, header =“auto”, sep =“auto”, dec =“.”, encoding =“unknown”, data.table = FALSE, na.strings = ””)
# Convert characters to UTF-8 encoding
## Depending on your local R settings
## you could try to ignore and skip the next 4 lines
colnames(df) <- iconv(colnames(df),“ASCII”,“UTF-8”)
col_names <- sapply(df, is.character)
df[ ,col_names] <- sapply(df[, col_names], function(col) iconv(col, “ASCII”, “UTF-8”))
# Function for the p-value format:
pformat<-function(p){
if (p<0.001) return("<0.001") else return (round(p,3))
}
# Columns: Bodymass and Greutate
j = 4
k = 3
pcorrelation <- cor(df[,j],df[,k], use="complete.obs", method="pearson")
round(pcorrelation,4) # Pearson correlation coefficient
fisherci <- cor.test(df[,j],df[,k], method="pearson")
c(round(fisherci$conf.int[1],4),round(fisherci$conf.int[2],4)) # confidence interval
pformat(fisherci$p.value) # p-value
6
scatterplotMatrix(~df[,j]+df[,k], smooth=FALSE, var.labels=colnames(df)[c(j,k)],
main="Enhanced Scatterplots", col = "#2fa42d")
# Columns: Bodymass and Inaltime
j = 4
k = 2
pcorrelation <- cor(df[,j],df[,k], use="complete.obs", method="pearson")
round(pcorrelation,4) # Pearson correlation coefficient
fisherci <- cor.test(df[,j],df[,k], method="pearson")
c(round(fisherci$conf.int[1],4),round(fisherci$conf.int[2],4)) # confidence interval
pformat(fisherci$p.value) # p-value
scatterplotMatrix(~df[,j]+df[,k], smooth=FALSE, var.labels=colnames(df)[c(j,k)],
main="Enhanced Scatterplots", col = "#2fa42d")
# Columns: Greutate and Inaltime
j = 3
k = 2
pcorrelation <- cor(df[,j],df[,k], use="complete.obs", method="pearson")
round(pcorrelation,4) # Pearson correlation coefficient
fisherci <- cor.test(df[,j],df[,k], method="pearson")
c(round(fisherci$conf.int[1],4),round(fisherci$conf.int[2],4)) # confidence interval
pformat(fisherci$p.value) # p-value
scatterplotMatrix(~df[,j]+df[,k], smooth=FALSE, var.labels=colnames(df)[c(j,k)],
main="Enhanced Scatterplots", col = "#2fa42d")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('G:/REYAR/statsomat/Test shinyapps.io/Correlations')
shiny::runApp()
help("downloadHandler")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
help("conditionMessage")
help("conditionalPanel")
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(downloadButton)
runApp()
runApp()
runApp()
runApp()
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp()
shiny::runApp()
runApp()
runApp()
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
(a*log10(28)+b)/100
(-50*log10(28)+125)/100
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cat(colnames(df_num)[j],"and",colnames(df_num)[k])
runApp()
runApp()
runApp()
runApp()
cat(colnames(df)[j],"and",colnames(df)[k],fill=TRUE)
cat(!,"and","colnames(df)[k]",fill=TRUE)
cat(1,"and",2,fill=TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("showNotification")
runApp()
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
runApp('G:/REYAR/Statsomat/Development/Correlations')
